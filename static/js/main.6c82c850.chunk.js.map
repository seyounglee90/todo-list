{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","form","palette","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","color","style","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","Color","active","background","Palette","_ref2","colors","selected","onSelect","colorList","Palette_Color","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","nextTodos","Object","toConsumableArray","objectSpread","handleRemove","filter","handleSelectColor","_this$state2","src_components_TodoListTemplate","src_components_Form","src_components_Palette","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c82c850.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, palette, children}) => {\r\n    return (\r\n      <main className=\"todo-list-template\">\r\n        <div className=\"title\">\r\n          오늘 할 일\r\n        </div>\r\n        <section className=\"palette-wrapper\">\r\n          {palette}\r\n        </section>\r\n        <section className=\"form-wrapper\">\r\n          {form}\r\n        </section>\r\n        <section className=\"todos-wrapper\">\r\n          { children }\r\n        </section>\r\n      </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color}}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponetUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n  render() {\r\n    \r\n    const { text, checked, id, color, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n        <div className=\"remove\" onClick={(e) => {\r\n          e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n          onRemove(id)}\r\n        }>&times;</div>\r\n        <div style={{ color }} className={`todo-text ${checked && 'checked'}`}>\r\n          <div>{text}</div>\r\n        </div>\r\n        {\r\n          checked && (<div className=\"check-mark\">✓</div>)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    const todoList = todos.map(\r\n      ({id, text, checked, color}) => (\r\n        <TodoItem\r\n          id={id}\r\n          text={text}\r\n          checked={checked}\r\n          color={color}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n          key={id}\r\n        />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {todoList}    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;","import React from 'react';\r\nimport './Palette.css';\r\n\r\nconst Color = ({ color, active, onClick }) => {\r\n  return (\r\n    <div className={`color ${active && 'active'}`} style={{ background: color}} onClick={onClick}>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nconst Palette = ({colors, selected, onSelect}) => {\r\n  const colorList = colors.map(\r\n    (color) => (<Color color={color} active={selected===color} onClick={() => onSelect(color)} key={color}/>)\r\n  );\r\n  return (\r\n    <div className=\"palette\">\r\n      {colorList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Palette;\r\n","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport Palette from './components/Palette';\n\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\nclass App extends Component {\n\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트 소개', checked: false },\n      { id: 1, text: ' JSX 사용해보기', checked: true },\n      { id: 2, text: ' 라이프 사이클 이해하기', checked: false },\n    ],\n    color: '#343a40'\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    this.setState({\n      input: '', // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false,\n        color\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n    \n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n    \n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleSelectColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n\n  render() {\n    const { input, todos, color } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n\n    return (\n      <TodoListTemplate form={(\n        <Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          color={color}\n        />\n      )}\n        palette={(\n          <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n        )}>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}